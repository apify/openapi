get:
  tags:
    - Webhooks
  summary: Get list of webhooks
  description: >-
    Gets the list of webhooks that the user created.


    The endpoint supports pagination using the `limit` and `offset` parameters
    and it will not return more than 1000 records.

    By default, the records are sorted by the `createdAt` field in ascending
    order. To sort the records in descending order, use the `desc=1`

    parameter.
  operationId: webhooks_get
  parameters:
    - name: offset
      in: query
      description: >-
        Number of records that should be skipped at the start. The default value
        is `0`.
      style: form
      explode: true
      schema:
        type: number
        format: double
        example: 10
    - name: limit
      in: query
      description: >-
        Maximum number of records to return. The default value as well as the
        maximum is `1000`.
      style: form
      explode: true
      schema:
        type: number
        format: double
        example: 99
    - name: desc
      in: query
      description: >-
        If `true` or `1` then the objects are sorted by the `createdAt` field in
        descending order. By default, they are sorted in ascending order.
      style: form
      explode: true
      schema:
        type: boolean
        example: true
  responses:
    '200':
      description: ''
      headers: {}
      content:
        application/json:
          schema:
            allOf:
              - $ref: ../../components/schemas/webhooks/GetListOfWebhooksResponse.yaml
              - example:
                  data:
                    total: 2
                    offset: 0
                    limit: 1000
                    desc: false
                    count: 2
                    items:
                      - id: YiKoxjkaS9gjGTqhF
                        createdAt: '2019-12-12T07:34:14.202Z'
                        modifiedAt: '2019-12-13T08:36:13.202Z'
                        userId: wRsJZtadYvn4mBZmm
                        isAdHoc: false
                        shouldInterpolateStrings: false
                        eventTypes:
                          - ACTOR.RUN.SUCCEEDED
                        condition:
                          actorId: hksJZtadYvn4mBuin
                          actorTaskId: asdLZtadYvn4mBZmm
                          actorRunId: hgdKZtadYvn4mBpoi
                        ignoreSslErrors: false
                        doNotRetry: false
                        requestUrl: 'http://example.com/'
                        lastDispatch:
                          status: SUCCEEDED
                          finishedAt: '2019-12-13T08:36:13.202Z'
                        stats:
                          totalDispatches: 1
                      - id: YiKoxjkaS9gjGTqhF
                        createdAt: '2019-12-12T07:34:14.202Z'
                        modifiedAt: '2019-12-13T08:36:13.202Z'
                        userId: wRsJZtadYvn4mBZmm
                        isAdHoc: false
                        shouldInterpolateStrings: false
                        eventTypes:
                          - ACTOR.RUN.SUCCEEDED
                        condition:
                          actorId: hksJZtadYvn4mBuin
                          actorTaskId: asdLZtadYvn4mBZmm
                          actorRunId: hgdKZtadYvn4mBpoi
                        ignoreSslErrors: false
                        doNotRetry: false
                        requestUrl: 'http://example.com/'
                        lastDispatch:
                          status: SUCCEEDED
                          finishedAt: '2019-12-13T08:36:13.202Z'
                        stats:
                          totalDispatches: 1
          example:
            data:
              total: 2
              offset: 0
              limit: 1000
              desc: false
              count: 2
              items:
                - id: YiKoxjkaS9gjGTqhF
                  createdAt: '2019-12-12T07:34:14.202Z'
                  modifiedAt: '2019-12-13T08:36:13.202Z'
                  userId: wRsJZtadYvn4mBZmm
                  isAdHoc: false
                  shouldInterpolateStrings: false
                  eventTypes:
                    - ACTOR.RUN.SUCCEEDED
                  condition:
                    actorId: hksJZtadYvn4mBuin
                    actorTaskId: asdLZtadYvn4mBZmm
                    actorRunId: hgdKZtadYvn4mBpoi
                  ignoreSslErrors: false
                  doNotRetry: false
                  requestUrl: 'http://example.com/'
                  lastDispatch:
                    status: SUCCEEDED
                    finishedAt: '2019-12-13T08:36:13.202Z'
                  stats:
                    totalDispatches: 1
                - id: YiKoxjkaS9gjGTqhF
                  createdAt: '2019-12-12T07:34:14.202Z'
                  modifiedAt: '2019-12-13T08:36:13.202Z'
                  userId: wRsJZtadYvn4mBZmm
                  isAdHoc: false
                  shouldInterpolateStrings: false
                  eventTypes:
                    - ACTOR.RUN.SUCCEEDED
                  condition:
                    actorId: hksJZtadYvn4mBuin
                    actorTaskId: asdLZtadYvn4mBZmm
                    actorRunId: hgdKZtadYvn4mBpoi
                  ignoreSslErrors: false
                  doNotRetry: false
                  requestUrl: 'http://example.com/'
                  lastDispatch:
                    status: SUCCEEDED
                    finishedAt: '2019-12-13T08:36:13.202Z'
                  stats:
                    totalDispatches: 1
  deprecated: false
post:
  tags:
    - Webhooks
  summary: Create a webhook
  description: >-
    Creates a new webhook with settings provided by the webhook object passed as
    JSON in the payload.

    The response is the created webhook object.


    To avoid duplicating a webhook, use the `idempotencyKey` parameter in the
    request body.

    Multiple calls to create a webhook with the same `idempotencyKey` will only
    create the webhook with the first call and return the existing webhook on
    subsequent calls.

    Idempotency keys must be unique, so use a UUID or another random string with
    enough entropy.


    To assign the new webhook to an actor or task, the request body must contain
    `requestUrl`, `eventTypes`, and `condition` properties.


    * `requestUrl` is the webhook's target URL, to which data is sent as a POST
    request with a JSON payload.


    * `eventTypes` is a list of events that will trigger the webhook, e.g. when
    the actor run succeeds.


    * `condition` should be an object containing the ID of the actor or task to
    which the webhook will be assigned.


    * `payloadTemplate` is a JSON-like string, whose syntax is extended with the
    use of variables.


    * `headersTemplate` is a JSON-like string, whose syntax is extended with the
    use of variables. Following values will be re-written to defaults: "host",
    "Content-Type", "X-Apify-Webhook", "X-Apify-Webhook-Dispatch-Id",
    "X-Apify-Request-Origin"


    * `description` is an optional string.


    * `shouldInterpolateStrings` is a boolean indicating whether to interpolate
    variables contained inside strings in the `payloadTemplate`


    ```
        "isAdHoc" : false,
        "requestUrl" : "https://example.com",
        "eventTypes" : [
            "ACTOR.RUN.SUCCEEDED",
            "ACTOR.RUN.ABORTED"
        ],
        "condition" : {
            "actorId": "janedoe~my-actor",
            "actorTaskId" : "W9bs9JE9v7wprjAnJ"
        },
        "payloadTemplate": "",
        "headersTemplate": "",
        "description": "my awesome webhook",
        "shouldInterpolateStrings": false,
    ```


    **Important**: The request must specify the `Content-Type: application/json`
    HTTP header.
  operationId: webhooks_post
  parameters:
    - name: limit
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: string
    - name: offset
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: string
    - name: desc
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: string
  requestBody:
    description: ''
    content:
      application/json:
        schema:
          allOf:
            - $ref: ../../components/schemas/webhooks/WebhookCreate.yaml
            - example:
                isAdHoc: false
                eventTypes:
                  - ACTOR.RUN.SUCCEEDED
                condition:
                  actorTaskId: asdLZtadYvn4mBZmm
                idempotencyKey: fdSJmdP3nfs7sfk3y
                ignoreSslErrors: false
                doNotRetry: false
                requestUrl: 'http://example.com/'
                payloadTemplate: '{\n \"userId\": {{userId}}...'
                headersTemplate: '{\n \"Authorization\": Bearer...'
                description: this is webhook description
                shouldInterpolateStrings: false
        example:
          isAdHoc: false
          eventTypes:
            - ACTOR.RUN.SUCCEEDED
          condition:
            actorTaskId: asdLZtadYvn4mBZmm
          idempotencyKey: fdSJmdP3nfs7sfk3y
          ignoreSslErrors: false
          doNotRetry: false
          requestUrl: 'http://example.com/'
          payloadTemplate: '{\n \"userId\": {{userId}}...'
          headersTemplate: '{\n \"Authorization\": Bearer...'
          description: this is webhook description
          shouldInterpolateStrings: false
    required: true
  responses:
    '201':
      description: ''
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
              example: 'https://api.apify.com/v2/webhook/zdc3Pyhyz3m8vjDeM'
      content:
        application/json:
          schema:
            allOf:
              - $ref: ../../components/schemas/webhooks/CreateWebhookResponse.yaml
              - example:
                  data:
                    id: YiKoxjkaS9gjGTqhF
                    createdAt: '2019-12-12T07:34:14.202Z'
                    modifiedAt: '2019-12-13T08:36:13.202Z'
                    userId: wRsJZtadYvn4mBZmm
                    isAdHoc: false
                    shouldInterpolateStrings: false
                    eventTypes:
                      - ACTOR.RUN.SUCCEEDED
                    condition:
                      actorId: hksJZtadYvn4mBuin
                      actorTaskId: asdLZtadYvn4mBZmm
                      actorRunId: hgdKZtadYvn4mBpoi
                    ignoreSslErrors: false
                    doNotRetry: false
                    requestUrl: 'http://example.com/'
                    payloadTemplate: '{\n \"userId\": {{userId}}...'
                    headersTemplate: '{\n \"Authorization\": Bearer...'
                    description: this is webhook description
                    lastDispatch:
                      status: SUCCEEDED
                      finishedAt: '2019-12-13T08:36:13.202Z'
                    stats:
                      totalDispatches: 1
          example:
            data:
              id: YiKoxjkaS9gjGTqhF
              createdAt: '2019-12-12T07:34:14.202Z'
              modifiedAt: '2019-12-13T08:36:13.202Z'
              userId: wRsJZtadYvn4mBZmm
              isAdHoc: false
              shouldInterpolateStrings: false
              eventTypes:
                - ACTOR.RUN.SUCCEEDED
              condition:
                actorId: hksJZtadYvn4mBuin
                actorTaskId: asdLZtadYvn4mBZmm
                actorRunId: hgdKZtadYvn4mBpoi
              ignoreSslErrors: false
              doNotRetry: false
              requestUrl: 'http://example.com/'
              payloadTemplate: '{\n \"userId\": {{userId}}...'
              headersTemplate: '{\n \"Authorization\": Bearer...'
              description: this is webhook description
              lastDispatch:
                status: SUCCEEDED
                finishedAt: '2019-12-13T08:36:13.202Z'
              stats:
                totalDispatches: 1
  deprecated: false
